/****************************************************************************\ 
 *** 
 *** File                  : rtosal_simengineap.cpp
 *** 
 *** Generated by dSPACE Tools.
 *** (c) Copyright 2013, dSPACE GmbH. All rights reserved.
\****************************************************************************/

#if !defined(RTOSAL_SIMENGINEAP_CPP_)
#  define    RTOSAL_SIMENGINEAP_CPP_


/* -- Include directives. -- */
#  include "rtosal_task.h"
#  include "dssimengine_api.h"
#  include "IOCode_Data.h"
#  include "rtosal_msg.h"
#  include "rtosal_simengineap.h"

#  if defined(EXTERN_C_DECL)
#    undef EXTERN_C_DECL
#  endif
#  if defined(__cplusplus)
#    define EXTERN_C_DECL extern "C"
#  else
#    define EXTERN_C_DECL extern
#  endif


/* -- Defines and directives in module scope. After include directives. -- */
DSRTT_DEFINE_ENABLE_RTT_COMMUNICATION(g_dsrtt_comm_enabled, 1,
{1})

/* -- Variable declarations in module scope. -- */
double ScaledTimeInterval = 0;
double ScalingFactor = 1;

/* Task information variables for task: Periodic Task 1 */
DsSTaskVariables Periodic_Task_1Vars;

/* -- Definitions of exported functions. -- */

  void
RtosAlOnInit(
    DsTErrorList ErrorList) 
{
    /* Get application object */
    DsCApplication* pAppl = SimEngineApplGet();

    /* Create and configure task: Periodic Task 1 (Source: User default) */
    pRtosAlPeriodic_Task_1 = DsCRtosAlPeriodic_Task_1::create(ErrorList, 
    pAppl,
    "Periodic Task 1 (Source: User default)", 
    (UInt32) 40, 
    (UInt32) 0, 
    (UInt32) 0,
    (UInt32) DsNTask::SchedulingPolicy::FirstComeFirstServe, 
    (UInt32) DsNTask::OverrunMode::HandlerCall,
    (UInt32) 0,
    (UInt32) DsNTask::TaskType::Periodic,
    (DsCTask*) 0,
    (UInt32) 0);

    /* Set task simulation time variable */

    pRtosAlPeriodic_Task_1->setSimTimeVariable(&RtosAlTaskSimTime_Periodic_Task_1);

    /* Create and init timer driver and bind task to it */
    pRtosAlTimer_Periodic_Task_1 = DsCTimer::create(ErrorList, 0.001, 0.0);
    pRtosAlPeriodic_Task_1->bindTrigger(ErrorList, pRtosAlTimer_Periodic_Task_1);

    /* Bind function modules to task: Periodic Task 1 */
    pRtosAlPeriodic_Task_1->bindFcnModule(ErrorList, sine_fcnModule_SIDRoot_TID0);

    /* Init task information variables of task: Periodic Task 1 */
    pRtosAlPeriodic_Task_1->setTaskVariables(ErrorList, &Periodic_Task_1Vars);
    DS_SET_TASK_VARIABLE_SYMBOLS(Periodic_Task_1Vars);

    /* Set the deadline violation handler of task: pRtosAlPeriodic_Task_1 */
    pRtosAlPeriodic_Task_1->setDeadlineViolationFunction(ErrorList, &RtosAlDefaultDeadlineViolationHandler);

    /* DSModelAccess initialization hook */
    (void)DS_MODEL_ACCESS_INIT();

}

  void
RtosAlOnStart(
    DsTErrorList ErrorList) 
{
    // Get the application object
    DsCApplication* pAppl = SimEngineApplGet();

    // Create local copies of variables
    double tmpScaledTimeInterval = ScaledTimeInterval;
    double tmpScalingFactor = ScalingFactor;

    // Perform range check for scaling variables
    if (0.0 > ScaledTimeInterval)
    {
        // Range check failed. Stop the application
        pAppl->errorMessage(RTOSAL_PARAM_OUT_OF_RANGE, "%s%f%s%s" , "ScaledTimeInterval" , ScaledTimeInterval, "0.0" , "Inf" );

        // Reset the local copy to the default value and leave the original unchanged
        tmpScaledTimeInterval = 0.0;
    }
    if (1.0 > ScalingFactor)
    {
        // Range check failed. Stop the application
        pAppl->errorMessage(RTOSAL_PARAM_OUT_OF_RANGE, "%s%f%s%s" , "ScalingFactor" , ScalingFactor, "1.0" , "Inf" );

        // Reset the local copy to the default value and leave the original unchanged
        tmpScalingFactor = 1.0;
    }

    // Set the startup slowdown parameters (local copies) to the realtime application
    pAppl->setSlowStart(ErrorList,tmpScaledTimeInterval,tmpScalingFactor);

    /* Init task simulation time variables */

    RtosAlTaskSimTime_Periodic_Task_1 = 0;
    StepCounter_Periodic_Task_1 = 0;

}

#endif                                 /* RTOSAL_SIMENGINEAP_CPP_ */
/* [EOF] */
