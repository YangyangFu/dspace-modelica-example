/****************************************************************************\ 
 *** 
 *** File                  : dssimengine_accesspoint.cpp
 *** Description           : 
 *** This file implements all access point functions provided by the simulation
 *** engine. The access point functions are called when the application state 
 *** changes or when the background task is executed.
 *** 
 *** Generated by dSPACE Tools.
 *** (c) Copyright 2013, dSPACE GmbH. All rights reserved.
\****************************************************************************/

#if !defined(DSSIMENGINE_ACCESSPOINT_CPP_)
#  define    DSSIMENGINE_ACCESSPOINT_CPP_


/* -- Include directives. -- */
#  include "dssimengine_accesspoint.h"
#  include "rtosal_simengineap.h"
#  include "rtosal_task.h"
#  include <dsrtt.h>
#  include "dssimengine_api.h"
#  include "IOCode_Data.h"
#  include "dssimengine_accesspoint_Voltage_Out.h"

#  if defined(EXTERN_C_DECL)
#    undef EXTERN_C_DECL
#  endif
#  if defined(__cplusplus)
#    define EXTERN_C_DECL extern "C"
#  else
#    define EXTERN_C_DECL extern
#  endif


/* -- Defines and directives in module scope. After include directives. -- */
#ifdef SIMENG_ENABLE_TEST_HOOKS
#include "dssimengine_testhooks.h"
#endif

#include "dssimengine_defines.h"

/* -- Variable declarations in module scope. -- */
UInt8 isFirstSimulation = 1;UInt32* pFuseActualStatus = 0;
UInt32* pFuseRestoreRequest = 0;
UInt8* pFailureSimulationClientConnected = 0;
UInt8* pFailureSimulationFailureConfigured = 0;
UInt8* pFailureSimulationFailureActivated = 0;
UInt16* pFailureSimulationSequenceCount = 0;
UInt8* pFailureSimulationRelaySwitching = 0;
UInt32* pXilApiEesPortActiveErrorSet = 0;
UInt32* pXilApiEesPortErrorActivated = 0;
UInt32* pXilApiEesPortErrorSwitching = 0;
UInt32* xilApiEesPortFlags = 0;
UInt32* xilApiEesPortTrigger = 0;

/* -- Declarations of extern functions. -- */

 EXTERN_C_DECL void ds_fivezoneg36_dsrt_DSRTInitMdl(
    void);

 EXTERN_C_DECL void ds_fivezoneg36_dsrt_DSRTStartMdl(
    void);

 EXTERN_C_DECL void ds_fivezoneg36_dsrt_DSRTStopMdl(
    void);

/* -- Declarations of module local functions. -- */

  void ApSimEngineRunTimeInit(
    DsTErrorList ErrorList, Int32 calledOnStart);

/* -- Definitions of exported functions. -- */

  void
ApSimEngineOnInit(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnInitPreCompTestHook();
    ApSimEngineOnInitIoPreRtosInit(ErrorList);
    ApSimEngineOnInitRtos(ErrorList);
    ApSimEngineOnInitIoPostRtosInit(ErrorList);
    ApSimEngineOnInitImc(ErrorList);
    ApSimEngineOnInitMdl(ErrorList);
    ApSimEngineOnInitHwDiagnostics(ErrorList);
    ApSimEngineOnInitTestHook();

}

  void
ApSimEngineOnStart(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStartPreCompTestHook();
    ApSimEngineOnStartMdl(ErrorList);
    ApSimEngineOnStartIo(ErrorList);
    ApSimEngineOnStartImc(ErrorList);
    ApSimEngineOnStartRtos(ErrorList);
    ApSimEngineOnStartTestHook();

}

  void
ApSimEngineOnStop(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStopPreCompTestHook();
    ApSimEngineOnStopRtos(ErrorList);
    ApSimEngineOnStopImc(ErrorList);
    ApSimEngineOnStopIo(ErrorList);
    ApSimEngineOnStopMdl(ErrorList);
    ApSimEngineOnStopTestHook();

}

  void
ApSimEngineOnTerminate(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnTerminatePreCompTestHook();
    ApSimEngineOnTerminateMdl(ErrorList);
    ApSimEngineOnTerminateRtos(ErrorList);
    ApSimEngineOnTerminateImc(ErrorList);
    ApSimEngineOnTerminateIo(ErrorList);
    ApSimEngineOnTerminateTestHook();

}

  void
ApSimEngineOnUnload(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnUnloadPreCompTestHook();
    ApSimEngineOnUnloadRtos(ErrorList);
    ApSimEngineOnUnloadImc(ErrorList);
    ApSimEngineOnUnloadIo(ErrorList);
    ApSimEngineOnUnloadMdl(ErrorList);
    ApSimEngineOnUnloadTestHook();

}

  void
ApSimEngineOnInitMdl(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnInitMdlPreCompTestHook();
ds_fivezoneg36_dsrt_DSRTInitMdl();
    ApSimEngineOnInitMdlTestHook();

}

  void
ApSimEngineOnStartMdl(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStartMdlPreCompTestHook();
ds_fivezoneg36_dsrt_DSRTStartMdl();
    ApSimEngineOnStartMdlTestHook();

}

  void
ApSimEngineOnStopMdl(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStopMdlPreCompTestHook();
ds_fivezoneg36_dsrt_DSRTStopMdl();
    ApSimEngineOnStopMdlTestHook();

}

  void
ApSimEngineOnTerminateMdl(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnTerminateMdlPreCompTestHook();
    ApSimEngineOnTerminateMdlTestHook();

}

  void
ApSimEngineOnUnloadMdl(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnUnloadMdlPreCompTestHook();
    ApSimEngineOnUnloadMdlTestHook();

}

  void
ApSimEngineOnInitImc(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnInitImcPreCompTestHook();
    ApSimEngineOnInitImcTestHook();

}

  void
ApSimEngineOnStartImc(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStartImcPreCompTestHook();
    ApSimEngineOnStartImcTestHook();

}

  void
ApSimEngineOnStopImc(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStopImcPreCompTestHook();
    ApSimEngineOnStopImcTestHook();

}

  void
ApSimEngineOnTerminateImc(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnTerminateImcPreCompTestHook();
    ApSimEngineOnTerminateImcTestHook();

}

  void
ApSimEngineOnUnloadImc(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnUnloadImcPreCompTestHook();
    ApSimEngineOnUnloadImcTestHook();

}

  void
ApSimEngineOnInitIoPreRtosInit(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnInitIoPreRtosInitPreCompTestHook();
DsCApplication* pApp = SimEngineApplGet();
// Self assignment of pApp to prevent compiler warning in case of applications without function blocks
pApp = pApp;
/* Registration of resource table to enable FIU functionality */
pApp->setIoResourceMap(ErrorList, &g_ResourceMap);
    ds_fivezoneg36_dsrt_fcnModule_SIDRoot_TID1 = DsCFcnModule::create(ErrorList, pApp);
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_2_TDisCor(ErrorList, pApp);
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_2_TDisSou(ErrorList, pApp);
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_2_TOut(ErrorList, pApp);
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_2_TRooCor(ErrorList, pApp);
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_2_TRooSou(ErrorList, pApp);
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_2_VFloCor(ErrorList, pApp);
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_2_VFloSou(ErrorList, pApp);
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_2_fanOnSta(ErrorList, pApp);
    ApSimEngineOnInitIoPreRtosInitTestHook();

}

  void
ApSimEngineOnInitIoPostRtosInit(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnInitIoPostRtosInitPreCompTestHook();
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_TDisCor(ErrorList);
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_TDisSou(ErrorList);
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_TOut(ErrorList);
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_TRooCor(ErrorList);
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_TRooSou(ErrorList);
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_VFloCor(ErrorList);
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_VFloSou(ErrorList);
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_fanOnSta(ErrorList);
/* Call RunTimeInit access point */
ApSimEngineRunTimeInit(ErrorList, 0);
    ApSimEngineOnInitIoPostRtosInitTestHook();

}

  void
ApSimEngineOnInitHwDiagnostics(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnInitHwDiagnosticsPreCompTestHook();
    // Get application object
    DsCApplication* pAppl = SimEngineApplGet();
    DsTDiagBlock* pDiagnosticsBlock = pAppl->getDiagnosticBlock(ErrorList);
    DsTFailureSimulationBlock* pFailureSimulationBlock = pAppl->getFailureSimulationBlock(ErrorList);
pFuseActualStatus = &pDiagnosticsBlock->FuseActualStatus;
pFuseRestoreRequest = &pDiagnosticsBlock->FuseRestoreRequest;
pFailureSimulationClientConnected = &pFailureSimulationBlock->ClientConnected;
pFailureSimulationFailureConfigured = &pFailureSimulationBlock->FailureConfigured;
pFailureSimulationFailureActivated = &pFailureSimulationBlock->FailureActivated;
pFailureSimulationSequenceCount = &pFailureSimulationBlock->SequenceCount;
pFailureSimulationRelaySwitching = &pFailureSimulationBlock->RelaySwitching;
pXilApiEesPortActiveErrorSet = &pFailureSimulationBlock->ActiveErrorSet;
pXilApiEesPortErrorActivated = &pFailureSimulationBlock->ErrorActivated;
pXilApiEesPortErrorSwitching = &pFailureSimulationBlock->ErrorSwitching;
xilApiEesPortFlags = 0;
xilApiEesPortTrigger = 0;
    ApSimEngineOnInitHwDiagnosticsTestHook();

}

  void
ApSimEngineOnStartIo(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStartIoPreCompTestHook();
/* Call RunTimeInit access point */
if (isFirstSimulation)
{
isFirstSimulation = 0;
ApSimEngineRunTimeInit(ErrorList, 1);
}
ApSimEngineOnStartIo_ctlcBODY_0_TDisCor(ErrorList);
ApSimEngineOnStartIo_ctlcBODY_0_TDisSou(ErrorList);
ApSimEngineOnStartIo_ctlcBODY_0_TOut(ErrorList);
ApSimEngineOnStartIo_ctlcBODY_0_TRooCor(ErrorList);
ApSimEngineOnStartIo_ctlcBODY_0_TRooSou(ErrorList);
ApSimEngineOnStartIo_ctlcBODY_0_VFloCor(ErrorList);
ApSimEngineOnStartIo_ctlcBODY_0_VFloSou(ErrorList);
ApSimEngineOnStartIo_ctlcBODY_0_fanOnSta(ErrorList);
    ApSimEngineOnStartIoTestHook();

}

  void
ApSimEngineOnStopIo(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStopIoPreCompTestHook();
ApSimEngineOnStopIo_ctlcBODY_0_TDisCor(ErrorList);
ApSimEngineOnStopIo_ctlcBODY_0_TDisSou(ErrorList);
ApSimEngineOnStopIo_ctlcBODY_0_TOut(ErrorList);
ApSimEngineOnStopIo_ctlcBODY_0_TRooCor(ErrorList);
ApSimEngineOnStopIo_ctlcBODY_0_TRooSou(ErrorList);
ApSimEngineOnStopIo_ctlcBODY_0_VFloCor(ErrorList);
ApSimEngineOnStopIo_ctlcBODY_0_VFloSou(ErrorList);
ApSimEngineOnStopIo_ctlcBODY_0_fanOnSta(ErrorList);
    ApSimEngineOnStopIoTestHook();

}

  void
ApSimEngineOnTerminateIo(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnTerminateIoPreCompTestHook();
    ApSimEngineOnTerminateIoTestHook();

}

  void
ApSimEngineOnUnloadIo(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnUnloadIoPreCompTestHook();
    ApSimEngineOnUnloadIoTestHook();

}

  void
ApSimEngineOnInitRtos(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnInitRtosPreCompTestHook();

    // Call init function that creates and configures all tasks
    RtosAlOnInit(ErrorList);

    /* Set stepsize to sampletime of RTT-task */
    dsrtt_set_step_size(0.001);
    

    /* Provide pointer to RTT-task */
    dsrtt_set_rtt_task(pRtosAlPeriodic_Task_1);
    ApSimEngineOnInitRtosTestHook();

}

  void
ApSimEngineOnStartRtos(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStartRtosPreCompTestHook();

    // Call function that configures the startup behavior of periodic tasks
    RtosAlOnStart(ErrorList);
    ApSimEngineOnStartRtosTestHook();

}

  void
ApSimEngineOnStopRtos(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnStopRtosPreCompTestHook();
    ApSimEngineOnStopRtosTestHook();

}

  void
ApSimEngineOnTerminateRtos(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnTerminateRtosPreCompTestHook();
    ApSimEngineOnTerminateRtosTestHook();

}

  void
ApSimEngineOnUnloadRtos(
    DsTErrorList ErrorList) 
{
    ApSimEngineOnUnloadRtosPreCompTestHook();
    ApSimEngineOnUnloadRtosTestHook();

}

  void
ApSimEngineIdle(
    DsTErrorList ErrorList) 
{
    ApSimEngineIdlePreCompTestHook();
    ApSimEngineIdleTestHook();

}

/* -- Definitions of module local functions. -- */

  void
ApSimEngineRunTimeInit(
    DsTErrorList ErrorList, Int32 calledOnStart) 
{
ApSimEngineRunTimeInit_ctlcBODY_0_TDisCor(ErrorList);
ApSimEngineRunTimeInit_ctlcBODY_0_TDisSou(ErrorList);
ApSimEngineRunTimeInit_ctlcBODY_0_TOut(ErrorList);
ApSimEngineRunTimeInit_ctlcBODY_0_TRooCor(ErrorList);
ApSimEngineRunTimeInit_ctlcBODY_0_TRooSou(ErrorList);
ApSimEngineRunTimeInit_ctlcBODY_0_VFloCor(ErrorList);
ApSimEngineRunTimeInit_ctlcBODY_0_VFloSou(ErrorList);
ApSimEngineRunTimeInit_ctlcBODY_0_fanOnSta(ErrorList);
if (calledOnStart)
{
}

}

#endif                                 /* DSSIMENGINE_ACCESSPOINT_CPP_ */
/* [EOF] */
